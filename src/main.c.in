/* -----------------------------------------------------------------------
OMhelp: Source Code -> Help Files: Copyright (C) 1998-2010 Bradley M. Bell

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
------------------------------------------------------------------------ */

# include "trace_exit.h"
# include "allocmem.h"
# include "strjoin.h"
# include "str_alloc.h"
# include "copyfile.h"
# include "InitParser.h"
# include "spell.h"
# include "Internal2Out.h"
# include "omhparse.h"
# include "input.h"
# include "StrLowAlloc.h"

# include <stdio.h>
# include <stdlib.h>
# include <time.h>
# include <string.h>
# include <assert.h>

# ifdef WIN32
# include <windows.h>
# endif

# define RUN_IN_DEBUGGER 0

// unsed by GNU allocate.c routine
const char *program_name = "omhelp";

int  DebugOmhelp         = 0;

static int GenerateXml   = 0;

static int printable  = 0;
int PrintableOmhelp()
{	return printable;
}

static int nowarn     = 0;
int PostWarnings()
{	return ! nowarn;
}

static int noframe     = 0;
int NoFrame()
{	return noframe;
}

static const char *siteName = NULL;
const char *SiteName()
{	return siteName;
}

static const char *imageLink = NULL;
const char *ImageLink()
{	return imageLink;
}

static char *imageFile = NULL;
const char *ImageFile()
{	return imageFile;
}

static int faviconSpecified = 0;
int FaviconSpecified()
{	return faviconSpecified;
}


static char *omhDir = NULL;
const char *OmhDir()
{	return omhDir;
}

extern void InitLex(void);


int main(int argc, const char *argv[])
{
	extern void LatexMacroPopFullyExpandedInput(void);

	const char *omhdir   = NULL;
	const char *root_file= NULL;
	const char *image    = NULL;
	const char *favicon  = NULL;

	char *fullname       = NULL;
	char *ext            = NULL;
	int error            = 0;
	int iarg             = 0;
	int morearg          = 0;
	char ch;

# ifdef NDEBUG
	const char *ndebug = "true";
# else
	const char *ndebug = "false";
# endif
# ifdef WIN32
	const char *win32  = "true";
# else
	const char *win32  = "false";
# endif

	// set default output file type
	Internal2OutSet("htm");

# if RUN_IN_DEBUGGER
	//
	root_file = "../../omh/latex/latexfont.omh";
	printf("root file = %s\n", root_file);
	omhdir = "../../omhelp_data";
	printf("omhelp_dir = %s\n", omhdir);
	//
	// Internal2OutSet("xml");
	// GenerateXml = 1;
	//
	// printable = 1;
# else
	error = argc < 2;
	if( ! error )
	{	root_file = argv[1];
		iarg = 2;
	}
	while( iarg < argc && ! error )
	{	morearg = iarg + 1 < argc;
		if( morearg && strcmp(argv[iarg], "-g") == 0 )
		{	printf(
			"The -g option on the command line has been removed\n"
			"because the glossary is no longer a special section.\n"
			"To obtain the backward compatibility:\n"
			"\tPlace $aindex head$$ before the first $head in\n"
			"\tthe glossary file and specify the glossary file\n"
			"\tas the last child of the root section.\n"
			);
			trace_exit(1);
		}
		else if( strcmp(argv[iarg], "-debug") == 0 )
			DebugOmhelp = 1;
		else if( strcmp(argv[iarg], "-xml") == 0 )
		{	Internal2OutSet("xml");
			GenerateXml = 1;
		}
		else if( strcmp(argv[iarg], "-printable") == 0 )
			printable = 1;
		else if( strcmp(argv[iarg], "-noframe") == 0 )
			noframe  = 1;
		else if( strcmp(argv[iarg], "-nowarn") == 0 )
			nowarn  = 1;
		else if( (morearg && strcmp(argv[iarg], "-l") == 0) ||
		         (morearg && strcmp(argv[iarg], "-image_link") == 0) )
		{	iarg++;
			imageLink = argv[iarg];
			if( strchr(imageLink, '\\') != NULL )
			{
				printf("must use \"/\" in place of \"\\\" "
				       "in the link internet address\n"
				);
				trace_exit(1);
			}
		}
		else if( (morearg && strcmp(argv[iarg], "-i") == 0) ||
		         (morearg && strcmp(argv[iarg], "-image_file") == 0) )
		{	iarg++;
			image = argv[iarg];
		}
		else if( morearg && strcmp(argv[iarg], "-favicon") == 0 )
		{	iarg++;
			favicon = argv[iarg];
		}
		else if( morearg && strcmp(argv[iarg], "-site") == 0 )
		{	iarg++;
			siteName = argv[iarg];
		}
		else if( morearg && strcmp(argv[iarg], "-omhelp_dir") == 0 )
		{	iarg++;
			omhdir = argv[iarg];
		}
		else	error = 1;
		#
		iarg = iarg + 1;
	}
	error = error || iarg != argc;

	// version information
	printf("OMhelp: Version=%s, ndebug=%s, win32=%s\n",
		"@omhelp_version@", ndebug, win32
	);
	if( error )
	{
		printf(
			"omhelp  root_file "
			"[-debug]  "
			"[-xml] "
			"[-printable] "
			"[-noframe] "
			"[-nowarn] "
			"[-image_link image_link] "
			"[-image_file image_file] "
			"[-favicon favicon] "
			"[-site name] "
			"[-omhelp_dir dir] "
			"\n"
		);
		printf("see the file doc/running.htm or doc/running.xml\n");
		trace_exit(1);
	}
# endif

	if( omhdir == NULL )
		omhdir = "@omhelp_prefix@/@omhelp_datadir@/omhelp_data";
# if 0
	// old windows install (before cmake)
	if( omhdir == NULL )
		omhdir = getenv("omhelp_dir");
	if( omhdir == NULL )
	{
		// Look for omhelp_dir in windows system INI file
		const char *appName =  "OMhelp";
		const char *keyName =  "omhelp_dir";
		const char *Default =  "";
		char returnString[_MAX_PATH + 1];
		size_t nSize = _MAX_PATH;
		GetProfileString(
			appName,
			keyName,
			Default,
			returnString,
			nSize
		);
		if( returnString[0] != '\0' )
		{	char *stmp = strjoin("omhelp_dir=", returnString);
			putenv(stmp);
			FreeMem(stmp);
			omhdir = getenv("omhelp_dir");
		}
		else
		{	size_t flag = GetWindowsDirectory(returnString, nSize);
			printf("omhelp_dir environment variable not set and\n");
			printf(" Cannot find: %s=value\n", keyName);
			printf("       Under: [%s]\n", appName);
			printf("     In file: win.ini\n");
			if( 0 < flag && flag <= nSize )
				printf("In directory: %s\n", returnString);
			printf(
				"Where value is replaced by the "
				"OMhelp install directory.");
			trace_exit(1);
		}
	}
# endif
	assert( omhdir != NULL );
	ch = omhdir[strlen(omhdir) - 1];
	if( ch == '/' || ch == '\\' )
		omhDir = str_alloc(omhdir);
	else	omhDir = strjoin(omhdir, "\\");


	// must initialize parser before calling error routines
	// and copyfile may call error routines.
	// In addition, initializing parser initializes input routines.
	InitParser(root_file);

	// copy the image file to the current directory
	if( imageLink != NULL )
	{	const char *dir;
		char *root;

		if( image == NULL )
		{	fullname = StrCat(
				__FILE__,
				__LINE__,
				omhDir,
				"_image.gif",
				NULL
			);
			imageFile = str_alloc("_image.gif");
		}
		else
		{
			InputSplitName(&root, &ext, image);
			if( ext[0] == '\0' ) printf(
				"The image file name %s"
				"\ndoes not have an extension",
				image
			);
			dir      = InputSearch(root, ext);
			fullname = StrCat(
				__FILE__,
				__LINE__,
				dir,
				root,
				ext,
				NULL
			);
			imageFile = strjoin("_image", ext);

			FreeMem(root);
			FreeMem(ext);
		}

		// make a local copy of file
		copyfile(imageFile, fullname);

		FreeMem( fullname );
	}

	// copy the favicon file to the current directory
	if( favicon == NULL )
		faviconSpecified = 0;
	else
	{	char *root;
		const char *dir;
		faviconSpecified = 1;

		InputSplitName(&root, &ext, favicon);
		if( strcmp(ext, ".png") != 0 )
		{	printf(
				"The favicon file name %s "
				"\ndoes not have the .png extension\n",
				favicon
			);
			printf(
			"see favicon in doc/running.htm or doc/running.xml\n"
			);
			trace_exit(1);
		}
		dir      = InputSearch(root, ext);
		fullname = StrCat(
			__FILE__,
			__LINE__,
			dir,
			root,
			ext,
			NULL
		);
		copyfile("_favicon.png", fullname);

		FreeMem(root);
		FreeMem(ext);
		FreeMem(fullname);
	}

# if 0
	// No longer necessary as of 2012-02-12.
	// copy the mathml style files to the current directory
	if( GenerateXml )
	{
		/*
		pmathml.xsl
		*/
		fullname = StrCat(
			__FILE__,
			__LINE__,
			omhDir,
			"pmathml.xsl",
			NULL
		);
		copyfile("pmathml.xsl", fullname);
		FreeMem( fullname );

		/*
		pmathmlcss.xsl
		*/
		fullname = StrCat(
			__FILE__,
			__LINE__,
			omhDir,
			"pmathmlcss.xsl",
			NULL
		);
		copyfile("pmathmlcss.xsl", fullname);
		FreeMem( fullname );

	}
# endif

	InitSpelling(omhDir);

	omhparse();

	FreeMem(omhDir);
	FreeMem(imageFile);

	LatexMacroPopFullyExpandedInput();

	CheckMemoryLeak();

	trace_exit(0);

	// never reach here but avoid warning
	assert(0);
	return 1;
}
