<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Determine if Two Values Are Nearly Equal</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Determine if Two Values Are Nearly Equal">
<meta name="keywords" id="keywords" content=" determine if two values are nearly equal syntax purpose x y r e example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_near_equal_f_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/omhelp" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="view_near_equal_f.htm" target="_top">Prev</a>
</td><td><a href="start_multiple.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>overview</option>
<option>get_started</option>
<option>start_embed</option>
<option>near_equal_f</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_overview_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_get_started_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_start_embed_htm.js'></script>
</td>
<td>near_equal_f</td>
</tr></table><br>
 


<center><b><big><big>Determine if Two Values Are Nearly Equal</big></big></b></center>

<br><a href="near_equal_f.htm#Syntax" target="_top">Syntax</a>
<br><a href="near_equal_f.htm#Purpose" target="_top">Purpose</a>
<br><a href="near_equal_f.htm#x" target="_top">x</a>
<br><a href="near_equal_f.htm#y" target="_top">y</a>
<br><a href="near_equal_f.htm#r" target="_top">r</a>
<br><a href="near_equal_f.htm#a" target="_top">a</a>
<br><a href="near_equal_f.htm#e" target="_top">e</a>
<br><a href="near_equal_f.htm#Example" target="_top">Example</a>
<br><br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>e</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;near_equal_f(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>r</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Returns true,
if 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is nearly equal to 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 and false otherwise.

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;precision&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="y" id="y">y</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;precision&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="r" id="r">r</a></big></b>
<br>
The relative error criteria 
<code><i><font color="black"><span style='white-space: nowrap'>r</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;precision&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>r</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It must be greater than or equal zero.
The relative error condition is satisfied if
<small>@[@

	| x - y | \leq r ( |x| + |y| )

@]@</small>
where <small>@(@
\leq
@)@</small> denotes less than or equal.

<br>
<br>
<b><big><a name="a" id="a">a</a></big></b>
<br>
The absolute error criteria 
<code><i><font color="black"><span style='white-space: nowrap'>a</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;precision&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It must be greater than or equal zero.
The absolute error condition is satisfied if
<small>@[@

	| x - y | \leq a

@]@</small>

<br>
<br>
<b><big><a name="e" id="e">e</a></big></b>
<br>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>e</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logical&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>e</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
If either the relative or absolute error condition is satisfied,
it is true.
Otherwise, it is false.


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The following is an example and test of <code><font color="blue">near_equal_f</font></code>.
It returns true if the test succeeds and false if it fails.


<code><font color="blue">
<pre style='display:inline'> 
c Use integer for return value so that this function is callable by C
      integer function ok_near_equal_f()
      double precision x, y, r, a
      logical near_equal_f
      external near_equal_f
      x = 1.1
      y = 1.2
      r = .1
      a = 0.
      if( near_equal_f(x, y, r, a) ) then
            ok_near_equal_f = 1
      else
            ok_near_equal_f = 0
      endif
      end
</pre>

</font></code>


<hr>Input File: getstarted/near_equal_f.f

</body>
</html>
