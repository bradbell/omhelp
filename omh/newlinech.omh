# BEGIN SHORT COPYRIGHT
# ---------------------------------------------------------------------------
# OMhelp: Source Code -> Help Files: Copyright (C) 1998-2005 Bradley M. Bell
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# ---------------------------------------------------------------------------
# END SHORT COPYRIGHT
#
$begin newlinech$$
$spell 
	newlinech
	logdet
	det
	cend
	codep
	OMhelp
$$

$dollar @$$


$index newlinech$$
$index comment, program character$$
$index program, comment character$$
$index character, program comment$$

$section Setting Programming Source Code Comment Character$$

$table
$bold Syntax$$
$cnext $syntax/@newlinech /character/@@/$$ $rnext
$bold See Also$$ 
$cnext $xref/wspace/$$, $xref/codep/Source Code Examples/codep/$$
$tend

$fend 20$$

$head Purpose$$
Some computer languages do not have a multi-line comment mode.
The $code newlinech$$ command
enables you to put OMhelp commands in the source code for 
these languages.

$head character$$ 
There must be zero or one character in $italic character$$ and it
can not be the $code @$$ character.
Leading an trailing
$xref/glossary/White Space/white space/$$
in $italic character$$ is ignored.
All subsequent occurrences of $italic character$$
at the beginning of a line are ignored.
In addition, any 
$xref/glossary/White Space/white space/$$
that follows (not counting new line characters), 
is ignored.

$head Example$$
The input
$codep
c	@newlinech c@@
c	@bold Syntax:@@ @syntax//y/ = logdet(/x/)/@@
c
c	@head y@@
c	The return value @italic y@@ 
c	is set equal to the log of the determinant of @italic x@@.
c
c	@head x@@
c	The argument @italic x@@ 
c	must be a square positive semi-definite matrix
$$
results in
$pre

$$
c	$newlinech c$$
c	$bold Syntax:$$ $syntax//y/ = logdet(/x/)/$$
c
c	$head y$$
c	The return value $italic y$$ 
c	is set equal to the log of the determinant of $italic x$$.
c
c	$head x$$
c	The argument $italic x$$ 
c	must be a square positive semi-definite matrix
c	$newlinech $$

$head Discussion of Example$$
In the example above,
note that the $code c$$ that occurs before the first $code newlinech$$
command is not ignored. 
You can avoid this by placing the
$code newlinech$$ command on the same line as the 
$code begin$$ command for the section.
For example, the input
$codep
c	@begin logdet@@ @newlinech c@@
c	@bold Syntax:@@ @syntax//y/ = logdet(/x/)/@@
c
c	@head y@@
c	The return value @italic y@@ 
c	is set equal to the log of the determinant of @italic x@@.
c
c	@head x@@
c	The argument @italic x@@ 
c	must be a square positive semi-definite matrix
c	@end
$$
would not result in any of the $code c$$ characters
at the being of the input line being printed because
all characters before the $code begin$$ command are ignored.

$head Reference$$
The $code newlinech$$ command has effect till the next such command
is executed or the end of the current section (which ever comes first). 
The command
$codep
	@newlinech @@
$$
removes the effect of the current $code newlinech$$ command without
providing a new character to replace it.


$end
