-------------------------------------------------------------------------------
OMhelp: Language Independent Embedded Documentation
          Copyright (C) 1998-2015 Bradley M. Bell
OMhelp is distributed under the terms of the
            GNU General Public License Version 2.
-------------------------------------------------------------------------------
#
$begin codei$$
$spell
	codei
	icode
	const
	cmd
	preformatted
$$
$dollar @$$



$section Switch Between Code and Italic Preformatted Font$$
$mindex icode syntax prototype$$
$index command, display$$
$index display, command$$

$head Syntax$$
$codei/@/codei/%/text1/%/text2/%/.../%/textN/%@@
/$$
$codei/@/icode/%/text1/%/text2/%/.../%/textN/%@@/$$


$head See Also$$
$cref font$$, $cref color$$

$head Purpose$$
Display text that alternates between
a pre-formatted code font and
a pre-formatted italic font.
The code font is the same as for the $cref/@code/font/$$ command.
Because it is pre-formatted,
the italic font is different from the
$cref/@italic/font/$$ command.

$head escape$$
Any occurrences of the $cref escape$$ character appears in the text,
are not put in the output.
This is helpful when aligning rows that have a different number
of delimiters in them.


$head codei$$
In this case, $icode text1$$ is in $codei code$$ font,
$icode text2$$ is in $icode italic$$ font, ...

$head icode$$
In this case, $icode text1$$ is in $icode italic$$ font,
$icode text2$$ is in $codei code$$ font, ...


$head text$$
The text
$codei/%/text1/%/text2/%/.../%/textN/%/$$
is a $cref/delimiter sequence/glossary/Delimiter Sequence/$$
and $code %$$ can be any character that is not a letter.
The characters in $icode text1$$, ..., $icode textN$$
are using in a
$cref/pre-formatted font/glossary/Pre-formatted Font/$$.
The characters in $icode text1$$ are in the first font
(and corresponding color),
the characters in $icode text2$$ are in the second font,
and so on.

$head Example$$
The syntax above was created using the $codei @codei$$ command.
The input
$codep
	@codei%extern void f(int %i% , const char *%s%);%@@
$$
produces the following output:
$codei%
	extern void f(int %i% , const char *%s%);
%$$
The input
$codep
	@codei|
	extern void f(
		int         |i| ,
		const char *|s|
	);|@@
$$
produces the following output
$codei|
	extern void f(
		int         |i| ,
		const char *|s|
	);
|$$

$subhead Escape$$
The $cref escape$$ character is useful because
the delimiter character does not appear in the output
(the default value for this character is $code \$$).
For example, the input
$codep
	@escape #@@
	@codei%
	%x%   = 1 + %a% + %b%
	%y%   = 2 + # #   %b%
	%@@
$$
produces the following output
$escape #$$
$codei%
	%x%   = 1 + %a% + %b%
	%y%   = 2 + # #   %b%
%$$

$head Remark$$
The $code @codei$$ and $code @icode$$ commands
provide similar functionality to the $cref syntax$$ command.
The differences are

$list number$$
You can begin with either the code or italic font.
$lnext
Both fonts are pre-formatted.
$lend

The advantage of beginning with either color is that it makes for
easier to read commands. For example, the input
$codep
	@icode i@@
$$
can be used to reference $icode i$$ in the prototypes above
(remember that when the delimiter is a space, there is only one entry in
the delimiter sequence and the other spaces are not delimiters).

$end
