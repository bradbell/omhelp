-------------------------------------------------------------------------------
OMhelp: Language Independent Embedded Documentation
          Copyright (C) 1998-2019 Bradley M. Bell
OMhelp is distributed under the terms of the
            GNU General Public License Version 2.
-------------------------------------------------------------------------------
#
$begin InstallWindows$$
$dollar @$$
$spell
	libboost
	libsource
	regex
	xam
	OMhelp
	Cygwin
	Gw
	cmake
	omhelp
	vcvarsall
	mkdir
	Makefiles
	datadir
	usr
	nmake
	src
	exe
	omh
	getstarted
	dev
	noframe
	xml
	dir
	subtree
	htm
	del
	wrd
	Microsoft
$$

$section Windows Installation and Testing$$

$head Warning$$
These instructions are old and need to be tested and updated.

$head Using Cygwin and MinGw$$
If you are using
$href%http://www.cygwin.com%cygwin%$$
or,
$href%http://www.mingw.org%mingw%$$,
just follow all of the $cref/unix install/InstallUnix/$$ steps.
If you are using Dos formatted files, download the DOS version
(see next step) and then follow the Unix installation steps.

$head Requirements$$
The following programs are required to install OMhelp under windows:

$subhead 7z$$
The program $href%http://www.7-zip.org/%7-zip%$$,
for unpacking zip files, must be in your execution path.
For example, on many systems can be done using
$codep
	set PATH=C:\Program Files\7-Zip;%PATH%
$$
A different archiving program could be used so long as it understands
files with the $code .zip$$ extension.

$subhead cmake$$
The program $href%http://www.cmake.org/%cmake%$$,
for installing other programs from source code,
must be in your execution path.
For example, on some systems can be done using
$codep
	set PATH=C:\Program Files (x86)\CMake\bin;%PATH%
$$

$subhead Visual Studio$$
$href%http://www.visualstudio.com/downloads/download-visual-studio-vs
	%Visual Studio Express
%$$,
which contains a C compiler (other C compilers could be used).
If you are using Visual Studio you will have to set some
variables using its $code vcvarsall.bat$$ file.
For example, on some systems can be done using
$codep
	set VCDIR=C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC
	call "%VCDIR%\vcvarsall.bat" x86
$$


$subhead Optional$$
$list number$$
If you are using the $cref srcfile$$ command, you will need the
$href%http://www.gnu.org/software/src-highlite/%source-highlight%$$
library which in turn requires the
$href%http://www.boost.org/doc/libs/1_60_0/libs/regex/doc/html/index.html
	%boost_regex
%$$
library.
$lnext
If you are changing the $code src/omhelp.y$$, $code latex.y$$, or
$code latex.l$$ file you will also need
$href%http://flex.sourceforge.net/%flex%$$ and
$href%http://bison.sourceforge.net/%bison%$$ in your execution path.
$lend

$head Download OMhelp$$
Use the following link to download the current version of OMhelp:
$href%
	https://github.com/bradbell/omhelp/archive/20171212.zip%
	omhelp-20171212.zip
%$$

$head Create Distribution Directory$$
Use the command
$codei%
	"%zip_prefix%\7z" x omhelp-20171212.zip
%$$
where $icode zip_prefix$$ is the prefix for the install of
$code 7-zip$$.
We refer to $code omhelp-20171212$$ as the
$icode distribution_directory$$.

$head CMake Command$$
Execute the following commands:
$codei|
	cd %distribution_directory%
	mkdir build
	cd build
	"%cmake_prefix%\bin\cmake"  ^
		-G "NMake Makefiles"  ^
		-D boost_regex_prefix=|boost_regex_prefix|  ^
		-D source_highlight_prefix=|source_highlight_prefix|  ^
		-D have_flex_and_bison=|have_flex_and_bison| ^
		-D omhelp_prefix=|omhelp_prefix|  ^
		-D omhelp_datadir=|omhelp_datadir|  ^
		-D omhelp_c_flags=|omhelp_c_flags|  ^
		-D omhelp_build_type=|omhelp_build_type|  ^
		..
|$$
Only the program $icode%cmake_prefix%cmake%$$,
the type of make files $code -G "NMake Makefiles"$$,
and the distribution directory reference $code ..$$,
are required.
The other entries use default values if they are not specified.

$subhead boost_regex_prefix$$
The default value for $icode boost_regex_prefix$$ is $code /usr$$.
This prefix assumes the boost $code regex$$ library is installed
as one of the following:
$codei%
	/usr/lib/libboost_regex.*
	/usr/lib64/libboost_regex.*
%$$
2DO: THis has not yet been tested.

$subhead source_highlight_prefix$$
The default value for $icode source_highlight_prefix$$ is $code /usr$$.
This prefix assumes the boost $code source-highlight$$ library is installed
as one of the following:
$codei%
	/usr/lib/libsource-highlight.*
	/usr/lib64/libsource-highlight.*
%$$
2DO: This has not yet been tested.

$subhead have_flex_and_bison$$
If you have these
$cref/optional tools/InstallWindows/Requirements/Optional/$$,
you should specify this value as $code YES$$.
Otherwise, you should use $code NO$$ (the default).

$subhead omhelp_prefix$$
The default value for $icode omhelp_prefix$$ is $code \usr$$; i.e.,
by default the OMhelp executable is installed in
$codep
	\usr\bin\omhelp.exe
$$
If you do not have write permission for $code \usr$$,
you must specify a $icode prefix$$.
If $icode%omhelp_prefix%\bin%$$ is not in your path,
you will have to specify the entire path
$icode%omhelp_prefix%\bin\omhelp%$$ when
you execute it.

$subhead omhelp_datadir$$
The data files used by OMhelp are installed in
$codei%
	%omhelp_prefix%\%omhelp_datadir%\omhelp_data
%$$
The default value for $icode omhelp_datadir$$ is $code share$$.

$subhead omhelp_c_flags$$
These are extra flags, besides the debug and release flags,
that are used during compilation.
The default value for $icode omhelp_c_flags$$ is none.

$subhead omhelp_build_type$$
This should be either $code debug$$ (compile for debugging)
or $code release$$ (compile for speed).
The default, if it is not specified, is $code debug$$.

$head Build Executable$$
In the $icode%distribution_directory%\build%$$ execute the following command
$codep
	nmake
$$
This should build the program
$codei%
	%distribution_directory%\build\src\omhelp.exe
%$$
If you have fortran,
and CMake can figure out how to link C to Fortran,
the following program will also be built
$codei%
	%distribution_directory%\build\omh\getstarted\run_all.exe
%$$

$head OMhelp Documentation$$
It is no longer necessary to build the
OMhelp developer and user documentation before installing OMhelp;
i.e., you can skip these steps.

$subhead Developer Documentation$$
Starting in the $icode%distribution_directory%%$$ directory,
the following commands create the developer documentation in the
$icode%distribution_directory%/dev%$$:
$codep
	mkdir dev
	cd dev
	..\build\src\omhelp ..\src\omh\omhelp.omh > ..\omhelp.dev.log ^
		-noframe -xml -debug -omhelp_dir ..\omhelp_data
	cd ..
$$
This should complete without error, and so also functions as a test
of the distribution.

$subhead User Documentation$$
Starting in the $icode%distribution_directory%%$$ directory,
the following commands create the user documentation in the
$icode%distribution_directory%/doc%$$:
$codep
	mkdir doc
	cd doc
	..\build\src\omhelp ..\omh\overview.omh -noframe -xml -debug ^
		-omhelp_dir ..\omhelp_data
$$
This should complete without error, and so also functions as a test
of the distribution.

$head Install OMhelp$$
In the $icode%distribution_directory%\build%$$ execute the following command
$codep
	nmake install
$$

$head Getting Started$$
see $cref get_started$$

$head Spelling List$$
The OMhelp utility files are stored in the
$icode%distribution_directory%\omhelp_data%$$ directory.
The spelling lists below are a subset of these files.

$subhead english.wrd$$
The file $icode%distribution_directory%\omhelp_data\english.wrd%$$ is a
list of standard english words.
The words must be in alphabetic order, lower case, and contain only letters.
For example,
$codep
	a
	aardvark
	aardvarks
	...
$$
A default $code english.wrd$$ file is distributed with OMhelp.

$subhead local.wrd$$
The file $icode%distribution_directory%\omhelp_data\local.wrd%$$ is an optional
list of special words, not in $code english.wrd$$ that are to be
considered correctly spelled.
These words
must also be in alphabetic order, lower case, and contain only letters.

$subhead dictionary.bin$$
OMhelp combines the files $code english.wrd$$ and $code local.wrd$$
to form
$codei%
	%distribution_directory%\omhelp_data\dictionary.bin
%$$
If you make any changes to $code english.wrd$$ or $code local.wrd$$,
the file $code dictionary.bin$$ should be deleted.
A new $code dictionary.bin$$ that combines the words $code english.wrd$$
and $code local.wrd$$ can be created and installed by executing following
commands in the $icode%distribution_directory%%$$ directory:
$codep
	del omhelp_data\dictionary.bin
	cd build\omh\getstarted
	..\..\src\omhelp ^
		..\..\..\omh\getstarted\simple_example.omh ^
		-omhelp_dir ..\..\..\omhelp_data
	cd ..\..
	make install
$$

$end
